<?php
// SAFEMODE: disable access-control gate
return;

// === class-tfg-access-control.php ===
class TFG_Access_Control
{
    /** Called from init.php */
    public static function init(): void
    {
        static $done = false; if ($done) return; $done = true;
        (new self())->register_hooks();
    }

    public function register_hooks(): void
    {
        add_action('admin_init',        [$this, 'restrict_admin_pages']);
        add_action('template_redirect', [$this, 'block_frontend_single_access'], 0);
        add_action('rest_api_init',     [$this, 'restrict_rest_endpoints']);
    }

    /**
     * Block non-admins from managing sensitive CPTs in wp-admin.
     */
public function restrict_admin_pages(): void
{
    // Only in real wp-admin page loads (not AJAX/REST)
    if (!is_admin() || wp_doing_ajax() || (defined('REST_REQUEST') && REST_REQUEST)) {
        if (defined('TFG_ADMIN_LOG') && TFG_ADMIN_LOG) return;
    }

    // Allow turning this off from wp-config.php
    if (defined('TFG_ADMIN_LOCKDOWN') && TFG_ADMIN_LOCKDOWN === false) {
        return;
    }

    // Safety: never restrict real admins even if a bad filter flips manage_options
    $uid = get_current_user_id();
    if ($uid && (is_super_admin($uid)
        || user_can($uid, 'activate_plugins')
        || user_can($uid, 'edit_users')
        || user_can($uid, 'manage_options'))) {
        return;
    }

    // Determine current post type safely
    $screen = function_exists('get_current_screen') ? get_current_screen() : null;
    $pt = '';
    if ($screen && !empty($screen->post_type)) {
        $pt = $screen->post_type;
    } elseif (isset($_GET['post_type'])) {
        $pt = sanitize_key(wp_unslash($_GET['post_type']));
    }

    $restricted = ['subscriber', 'verification_tokens', 'magic_tokens'];

    // List tables: /wp-admin/edit.php?post_type=...
    if ($pt !== '' && in_array($pt, $restricted, true)) {
        if (defined('TFG_ADMIN_LOG') && TFG_ADMIN_LOG) {
            error_log('[TFG] RestrictAdmin: redirect list screen for post_type=' . $pt);
        }
        wp_safe_redirect( admin_url('index.php?tfg_denied=1') );
        exit;
    }

    // Single editor: /wp-admin/post.php?post=ID&action=edit
    if (isset($_GET['post'])) {
        $post_id = (int) $_GET['post'];
        if ($post_id > 0) {
            $post = get_post($post_id);
            if ($post && in_array($post->post_type, $restricted, true)) {
                if (defined('TFG_ADMIN_LOG') && TFG_ADMIN_LOG) {
                    error_log('[TFG] RestrictAdmin: redirect single edit for post_id=' . $post_id . ' (' . $post->post_type . ')');
                }
                wp_safe_redirect( admin_url('index.php?tfg_denied=1') );
                exit;
            }
        }
    }
}

    /**
     * Block front-end direct access to sensitive CPT singles.
     */
    public function block_frontend_single_access(): void
    {
        if (is_admin() || wp_doing_ajax() || wp_is_json_request()) return;
        if (current_user_can('manage_options')) return;

        if (is_singular(['subscriber', 'verification_tokens', 'magic_tokens'])) {
            global $wp_query;
            $wp_query->set_404();
            status_header(404);
            nocache_headers();

            $tpl = get_404_template();
            if ($tpl) {
                include $tpl;
            } else {
                wp_die(esc_html__('Not found', 'tfg'), 404);
            }
            exit;
        }
    }

    /* ---------- Safe capability helpers (no map_meta_cap notices) ---------- */

    /** Generic UI gating (no specific post): use the primitive cap. */
    public static function can_delete_posts(string $post_type): bool
    {
        $pto = get_post_type_object($post_type);
        return $pto && !empty($pto->cap->delete_posts) && current_user_can($pto->cap->delete_posts);
    }

    /** Specific post permission: use the meta cap with the post ID. */
    public static function can_delete_post(int $post_id): bool
    {
        return $post_id > 0 && current_user_can('delete_post', $post_id);
    }

    /** Try to resolve a post ID from the current context. */
    public static function context_post_id(): int
    {
        global $post;
        if ($post instanceof WP_Post)        return (int) $post->ID;
        if ($qid = get_queried_object_id())  return (int) $qid;
        if (isset($_GET['post']))            return (int) $_GET['post'];
        if (isset($_POST['post_ID']))        return (int) $_POST['post_ID'];
        return 0;
    }

    /**
     * Block REST access to sensitive endpoints, but allow your public route.
     */
    public function restrict_rest_endpoints(): void
    {
        add_filter('rest_request_before_callbacks', function ($response, $handler, $request) {
            $route = $request->get_route(); // e.g. /custom-api/v1/create-verification-token

            // Allow your public token creation route
            if (strpos($route, '/custom-api/v1/create-verification-token') === 0) {
                return $response;
            }

            // Block wp/v2 CRUD on sensitive CPTs for non-admins
            $block_if_starts_with = [
                '/wp/v2/subscriber',
                '/wp/v2/verification_tokens',
                '/wp/v2/magic_tokens',
            ];

            foreach ($block_if_starts_with as $frag) {
                if (strpos($route, $frag) === 0 && !current_user_can('manage_options')) {
                    return new WP_Error('rest_forbidden', __('Access denied.', 'tfg'), ['status' => 403]);
                }
            }

            return $response;
        }, 10, 3);
    }
} // end class
